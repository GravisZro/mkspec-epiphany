ESDK				= /opt/adapteva/esdk
TOOLCHAIN_ROOT			= $$ESDK/tools/e-gnu/epiphany-elf
TOOLCHAIN_BIN			= $$ESDK/tools/e-gnu/bin/e
EPIPHANY_LDF			= $$ESDK/bsps/current/fast.ldf

MAKEFILE_GENERATOR		= UNIX
CONFIG				+= incremental gdb_dwarf_index
QMAKE_INCREMENTAL_STYLE		= sublib

### == include(../common/linux.conf)
QMAKE_PLATFORM                  += linux

#QMAKE_CFLAGS_THREAD		+= -D_REENTRANT
#QMAKE_CXXFLAGS_THREAD		+= $$QMAKE_CFLAGS_THREAD

#QMAKE_INCDIR			= 
QMAKE_LIBDIR			= $$TOOLCHAIN_ROOT/lib

QMAKE_LIBS			= -le-lib

QMAKE_AR			= $$TOOLCHAIN_BIN-ar cqs
QMAKE_OBJCOPY			= $$TOOLCHAIN_BIN-objcopy
QMAKE_RANLIB			=

QMAKE_STRIP			= $$TOOLCHAIN_BIN-strip
QMAKE_STRIPFLAGS_LIB		+= --strip-unneeded
QMAKE_INSTALL_FILE		= install -m 644 -p
QMAKE_INSTALL_PROGRAM		= install -m 755 -p

### ==== include(unix.conf)
QMAKE_PLATFORM			+= unix posix

QMAKE_LEX			= flex
QMAKE_LEXFLAGS			+=
QMAKE_YACC			= yacc
QMAKE_YACCFLAGS			+= -d
QMAKE_YACCFLAGS_MANGLE		+= -p $base -b $base
QMAKE_YACC_HEADER		= $base.tab.h
QMAKE_YACC_SOURCE		= $base.tab.c
QMAKE_PREFIX_SHLIB		= lib
QMAKE_PREFIX_STATICLIB		= lib
QMAKE_EXTENSION_STATICLIB	= a

### ====== include(shell-unix.conf)
QMAKE_TAR			= tar -cf
QMAKE_GZIP			= gzip -9f

QMAKE_COPY			= cp -f
QMAKE_COPY_FILE			= $$QMAKE_COPY
QMAKE_COPY_DIR			= $$QMAKE_COPY -R
QMAKE_MOVE			= mv -f
QMAKE_DEL_FILE			= rm -f
QMAKE_DEL_DIR			= rmdir
QMAKE_CHK_EXISTS		= test -e %1 ||
QMAKE_CHK_DIR_EXISTS		= test -d    # legacy
QMAKE_MKDIR			= mkdir -p   # legacy
QMAKE_MKDIR_CMD			= test -d %1 || mkdir -p %1
QMAKE_STREAM_EDITOR		= sed
### /======
### /====
### /==

### == include(../common/gcc-base-unix.conf)

### ==== include(gcc-base.conf)
QMAKE_CFLAGS			+= -pipe -Os -isystem $$TOOLCHAIN_ROOT/include -fno-exceptions
QMAKE_CFLAGS			+= -fno-rtti
QMAKE_CFLAGS			+= -fno-threadsafe-statics
QMAKE_CFLAGS			+= -freg-struct-return -fno-default-inline
QMAKE_CFLAGS_DEPS		+= -M
QMAKE_CFLAGS_WARN_ON		+= -Wall -W
QMAKE_CFLAGS_WARN_OFF		+= -w
QMAKE_CFLAGS_RELEASE		+= 
QMAKE_CFLAGS_DEBUG		+= -g
#QMAKE_CFLAGS_SHLIB		+= -fPIC
#QMAKE_CFLAGS_STATIC_LIB		+= -fPIC
#QMAKE_CFLAGS_APP		+= -fPIE
QMAKE_CFLAGS_YACC		+= -Wno-unused -Wno-parentheses
QMAKE_CFLAGS_HIDESYMS		+= -fvisibility=hidden
QMAKE_CFLAGS_EXCEPTIONS_OFF	+= -fno-exceptions

QMAKE_CXXFLAGS			+= $$QMAKE_CFLAGS
QMAKE_CXXFLAGS_DEPS		+= $$QMAKE_CFLAGS_DEPS
QMAKE_CXXFLAGS_WARN_ON		+= $$QMAKE_CFLAGS_WARN_ON
QMAKE_CXXFLAGS_WARN_OFF		+= $$QMAKE_CFLAGS_WARN_OFF
QMAKE_CXXFLAGS_RELEASE		+= $$QMAKE_CFLAGS_RELEASE
QMAKE_CXXFLAGS_DEBUG		+= $$QMAKE_CFLAGS_DEBUG
QMAKE_CXXFLAGS_SHLIB		+= $$QMAKE_CFLAGS_SHLIB
QMAKE_CXXFLAGS_STATIC_LIB	+= $$QMAKE_CFLAGS_STATIC_LIB
QMAKE_CXXFLAGS_APP		+= $$QMAKE_CFLAGS_APP
QMAKE_CXXFLAGS_YACC		+= $$QMAKE_CFLAGS_YACC
QMAKE_CXXFLAGS_HIDESYMS		+= $$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden
QMAKE_CXXFLAGS_EXCEPTIONS_OFF	+= $$QMAKE_CFLAGS_EXCEPTIONS_OFF

QMAKE_LFLAGS			+= -T $$EPIPHANY_LDF
QMAKE_LFLAGS_DEBUG		+=
QMAKE_LFLAGS_APP		+=
QMAKE_LFLAGS_RELEASE		+=
QMAKE_LFLAGS_EXCEPTIONS_OFF	+=

### /====

### /==

### == include(../common/g++-unix.conf)

### ==== include(g++-base.conf)

QMAKE_COMPILER			= $$TOOLCHAIN_BIN-gcc
QMAKE_CC			= $$TOOLCHAIN_BIN-gcc

QMAKE_LINK_C			= $$QMAKE_CC
QMAKE_LINK_C_SHLIB		= $$QMAKE_CC

QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += -Os -g

QMAKE_CXX			= $$TOOLCHAIN_BIN-g++

QMAKE_LINK			= $$TOOLCHAIN_BIN-g++
QMAKE_LINK_SHLIB		= $$TOOLCHAIN_BIN-g++

QMAKE_CXXFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO

QMAKE_PCH_OUTPUT_EXT             = .gch

QMAKE_CFLAGS_PRECOMPILE          = -x c-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}
QMAKE_CFLAGS_USE_PRECOMPILE      = -include ${QMAKE_PCH_OUTPUT_BASE}
QMAKE_CXXFLAGS_PRECOMPILE        = -x c++-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}
QMAKE_CXXFLAGS_USE_PRECOMPILE    = $$QMAKE_CFLAGS_USE_PRECOMPILE

QMAKE_CXXFLAGS_CXX11             = -std=c++1y
QMAKE_LFLAGS_CXX11               =
### /====

QMAKE_LFLAGS_RELEASE            += 
QMAKE_LFLAGS_NOUNDEF            += -Wl,--no-undefined
### /==

QMAKE_POST_LINK=e-strip --strip-all ${QMAKE_TARGET} && e-objcopy --srec-forceS3 --output-target srec ${QMAKE_TARGET} ${QMAKE_TARGET}.srec;

load(qt_config)
